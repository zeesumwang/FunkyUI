<template>
	<view class="app">

		<view class="main" ref="main">

			<swiper 
			  ref="swiper_box" 
			  class="swiper_box" 
			  @change="swiperChange" 
			  @transition="transition" 
			  @animationfinish="animationfinish"
			  easing-function="easeInOutCubic" 
			  duration="300"
			  :indicator-dots="false"
			  :current="currentFabIndex"
			  >

				<swiper-item style="justify-content: center;align-items: center;" v-for="(item,index) in fabList" :key="index">
					<view style="height: 450px;width: 450px;background-color: #a31a79;color: #ebebeb;">{{index}}</view>
				</swiper-item>
				
				<swiper-item style="justify-content: center;align-items: center;">
					<view style="height: 450px;width: 450px;background-color: #a31a79;color: #ebebeb;">user</view>
				</swiper-item>

			</swiper>

		</view>

		<view class="status_bar" ref="status_bar"></view>

		<view class="fab" ref="fab" elevation="15px">
			<view 
				v-for="(fab,index) in fabList" 
				class="fab_item" 
				:id="fab.id" 
				:key="fab.id" 
				@click="fabClick"
			>
				<image 
					:src="fab.url" 
					style="width: 20px;height: 20px;opacity: 0.2" 
					:style="{
								opacity:
									virtualCurrentFabIndex==index+hideCount
									? virtualCurrentFabIndexOpacity 
									: targetFabIndex==index+hideCount
									? targetFabIndexOpacity 
									: 0.2
								,
								borderRadius: 
									fab.id=='user'
									? '50rpx' 
									: ''
							}"
				>
				</image>
			</view>
		</view>
		
	</view>
</template>

<script>
	// #ifdef APP-NVUE
	const Binding = uni.requireNativePlugin('bindingx');
	// const dom = weex.requireModule('dom');
	// #endif
	
	

	export default {
		components: {
			
		},
		data() {
			return {
				hideCount: 1,
				fabList: [{
						id: 'home',
						url: "../../static/logo.png"
					},
					{
						id: 'search',
						url: "../../static/logo.png"
					},
					{
						id: 'taobao',
						url: "../../static/logo.png"
					},
					{
						id: 'user',
						url: "../../static/logo.png"
					}
				],
				isFabClick: false,
				selectedFab: 'home',
				isFabShow: true,
				isContinuity: 0,
				currentFabIndex: 1,
				virtualCurrentFabIndex: 1,
				virtualCurrentFabIndexOpacity: 1,
				targetFabIndex: '',
				targetFabIndexOpacity: '',
				
				screenHeight: '',
				screenHeightPx: {},
				screenWidthPx: '',

			}
		},
		onShow() {
			console.log("主页显示")
		},
		onHide() {
			console.log("主页隐藏")
		},
		onLoad() {
			var system = uni.getSystemInfoSync()
			console.log(system)
			this.screenHeightPx = system.screenHeight
			this.screenHeight = system.screenHeight * 750 / system.screenWidth
			this.screenWidthPx = system.screenWidth
			console.log('屏幕高度px,rpx', this.screenHeightPx, this.screenHeight)
			console.log('屏幕宽度px,rpx', system.screenWidth, 750)
			this.waterfallImgWidth = (system.screenWidth - 13) / 2
		},
		methods: {
			slideUP: function(val) {
				if (this.isFabShow == true) {
					this.hideFab()
				}
			},
			dragDown: function(val) {
				if (this.isFabShow == false) {
					this.showFab()
				}
			},
			transition: function(e) {
				// 如果是点击fab进行切换，则不用展示过度动画。
				if (this.isFabClick == true) {
					return
				}
				
				// 对连续的滑屏事件进行dx校准，在连续滑屏的时候只有一段连续的transition事件

				if (e.detail.dx > 0){
					var dx = e.detail.dx - this.screenWidthPx * this.isContinuity
				}
				else {
					var dx = e.detail.dx + this.screenWidthPx * this.isContinuity
				}
				
				
				
				if (dx > 0 && this.virtualCurrentFabIndex != 4) {
					this.targetFabIndex = this.virtualCurrentFabIndex + 1
				} 
				else if (dx < 0 && this.virtualCurrentFabIndex != 0) {
					this.targetFabIndex = this.virtualCurrentFabIndex - 1
				}
				
				this.targetFabIndexOpacity = Math.max(1.0 * Math.abs(dx) / this.screenWidthPx, 0.2)
				this.virtualCurrentFabIndexOpacity = Math.max(1.2 - this.targetFabIndexOpacity, 0.2)
				
				
				// 优化H5连续滑屏
				if (this.targetFabIndexOpacity > 1){
					// console.log("连续滑动触发",this.currentFabIndex,this.virtualCurrentFabIndex,this.targetFabIndex)
					this.isContinuity += 1 
					if (this.isContinuity > 0){
						console.log('连续滑屏 x',this.isContinuity + 1)
					}
					let real_dx = dx
					
					let tempOpacity = this.virtualCurrentFabIndexOpacity
					this.virtualCurrentFabIndexOpacity = 1
					this.targetFabIndexOpacity = 0.2
					
					if (real_dx > 0 && this.virtualCurrentFabIndex != 4){
						this.targetFabIndex += 1
						this.virtualCurrentFabIndex += 1
					}
					else if (real_dx < 0 && this.virtualCurrentFabIndex != 0) {
						this.targetFabIndex -= 1
						this.virtualCurrentFabIndex -= 1
					}
					// console.log("改变fab的指向",this.currentFabIndex,this.virtualCurrentFabIndex,this.targetFabIndex)
				}
				
				
			},
			animationfinish: function() {
				this.isContinuity = 0
				this.virtualCurrentFabIndexOpacity = 1
				this.targetFabIndexOpacity = 0
				this.virtualCurrentFabIndex = this.currentFabIndex
				this.targetFabIndex = ''
				this.isFabClick = false
			},
			fabClick: function(e) {
				if (!this.isFabShow) {
					return
				}
				this.isFabClick = true
				
				let click_id = ''
				
				// #ifdef APP-NVUE
				click_id = e.target.id
				// #endif
				
				// #ifndef APP-NVUE
				click_id = e.currentTarget.id
				// #endif
				
				
				// if(click_id == this.selectedFab) {
				// 	// 返回顶部
				// 	const ref = this.$refs[click_id]
				// 	ref.toTop()
				// }
				this.selectedFab = click_id
				if (this.selectedFab == "home") {
					this.currentFabIndex = this.hideCount
				} else if (this.selectedFab == "search") {
					this.currentFabIndex = this.hideCount + 1
				} else if (this.selectedFab == "taobao") {
					this.currentFabIndex = this.hideCount + 2
				} else if (this.selectedFab == "user") {
					this.currentFabIndex = this.hideCount + 3
				}
				this.virtualCurrentFabIndex = this.currentFabIndex
			},
			swiperChange: function(e) {
				let swiper_item_index = e.detail.current
				this.currentFabIndex = swiper_item_index
				if (swiper_item_index < this.hideCount) {
					console.log("显示负一屏，隐藏fab")
					if (this.isFabShow == true) {
						this.hideFab()
					}
				} 
				else {
					if (this.isFabShow == false) {
						console.log("隐藏负一屏，显示fab")
						this.showFab()
					}
				}
			},
			hideFab: function() {				
				console.log(this.$refs.fab)
				this.isFabShow = false
				
				// #ifdef APP-NVUE
				let fab = this.$refs.fab.ref
				var result = Binding.bind({
					eventType: 'timing',
					exitExpression: 't>150',
					props: [{
							element: fab,
							property: 'opacity',
							expression: 'linear(t,1,-1,150)'
						},
						{
							element: fab,
							property: 'height',
							expression: 'linear(t,50,-20,150)'
						}
					]
				}, ((res) => {
					this.isFabShow = false
					if (res.state === 'exit') {
						Binding.unbind({
							token: result
						})
					}
					if (res.state === 'start') {}
				}))
				// #endif
			},
			showFab: function() {
				console.log(this.$refs.fab)
				this.isFabShow = true
				
				// #ifdef APP-NVUE
				let fab = this.$refs.fab.ref
				var result = Binding.bind({
					eventType: 'timing',
					exitExpression: 't>150',
					props: [{
							element: fab,
							property: 'opacity',
							expression: 'linear(t,0,1,150)'
						},
						{
							element: fab,
							property: 'height',
							expression: 'linear(t,30,20,150)'
						}
					]
				}, ((res) => {
					if (res.state === 'exit') {
						this.isFabShow = true
						Binding.unbind({
							token: result
						})
					}
					if (res.state === 'start') {}
				}))
				// #endif
			},
			
		}
	}
</script>

<style>
	.app {
		flex: 1;
		background-color: #0d0d0d;
		/* background-image: linear-gradient(to top, #0d0d0d, #0d0d0d); */
		flex-direction: column;
	}
	
	.main {
		position: fixed;
	}

	.status_bar {
		height: 56rpx;
		width: 750rpx;
		/* background-color: #0d0d0d; */
		position: fixed;
		top: 0;
		opacity: 1;
	}

	.fab {
		width: 450rpx;
		height: 50px;
		border-radius: 45px;
		background-color: #212121;
		position: fixed;
		margin: 0 auto;
		left: 0;
		right: 0;
		bottom: 40rpx;
		flex: 1;
		flex-direction: row;
		align-items: center;
		justify-content: center;
	}

	.fab_item {
		height: 50px;
		width: 50px;
		margin: 6rpx;
		align-items: center;
		justify-content: center;
	}

	.swiper_box {
		flex: 1;
		width: 750rpx;
		height: 1624rpx;
	}
</style>
