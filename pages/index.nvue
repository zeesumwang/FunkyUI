<template>
	<view>

		<fk-tab ref="main-tab" :debug="false" @pageChange="pageChange" @scroll="scroll" @lockTouch="listScrollable = false" @unlockTouch="listScrollable = true"
		 :pageList="fabList" :defaultPageId="'home'" :easingFunction="easingFunction" :hasHidePage="true" :bindFabExpression="bindFabExpression"
		 :bindFabProperty="bindFabProperty" :fabStyles="fabStyles" :fabBackgroundColor="'#1e1e1e'" :backgroundColor="'#0b0b0b'"
		 :fabOpacity="0.96" :fabBlurEffect="'dark'" :fabElevation="15" :height="screenHeightPx" :width="screenWidthPx"
		 :indicatorBias="15" :bounceMode="true">
			<template v-slot:fab>
				<view @tap="fabTap($event,index)" v-for="(item, index) in fabList" :key="item.id" :id="item.id" :ref="item.id"
				 :style="{opacity: index == 0 ? 1 : 0.2}" style="padding: 15px;">
					<image :src="item.url" style="width: 20px;height: 20px;" :style="{borderRadius: item.id == 'user' ? '25px' : 0}">
					</image>
				</view>
			</template>

			<template v-slot:indicator>
				<view style="
					height: 6px;
					width: 24px;
					border-top-right-radius: 6px;
					border-top-left-radius: 6px;
					border-bottom-width: 0px;
					background-image: linear-gradient(to bottom, #ffffff, #ec7d9c);">
				</view>
			</template>

			<template v-slot:hidePage>
				<fk-video-list :videoData="videoData" :isPlay="currentPage==-1" @videoChange="videoChange">

				</fk-video-list>
			</template>

			<template v-slot:mainPage0>
				<view :style="{height: statusBarHeight + 'px'}"></view>
				<fk-list :width="screenWidthPx" :height="screenHeightPx - statusBarHeight" :hasRefresh="true" :scrollable="listScrollable"
				 :isRefresh="isRefresh" @refreshing="refreshing">
					<fk-cell v-for="(item, index) in data" :key="index" style="justify-content: center;align-items: center;">
						<view style="height: 220px;border-radius: 4px;margin-bottom: 5px;justify-content: center;align-items: center;background-color: #1a181a;"
						 :style="{width: screenWidthPx + 'px'}">
							<text style="color: #ebebeb">{{item}}</text>
						</view>
					</fk-cell>
				</fk-list>
					
			</template>

			<template v-slot:mainPage1>
				<view :style="{height: statusBarHeight + 'px'}"></view>
				<fk-list :width="screenWidthPx" :height="screenHeightPx - statusBarHeight" :hasRefresh="true" :scrollable="listScrollable"
				 :isRefresh="isRefresh" @refreshing="refreshing">
					<fk-cell v-for="(item, index) in data" :key="index" style="justify-content: center;align-items: center;">
						<view style="height: 220px;border-radius: 4px;margin-bottom: 5px;justify-content: center;align-items: center;background-color: #1a181a;"
						 :style="{width: screenWidthPx + 'px'}">
							<text style="color: #ebebeb">{{item}}</text>
						</view>
					</fk-cell>
				</fk-list>
			</template>

			<template v-slot:mainPage2>
				<userPage :easingFunction="easingFunction"></userPage>
				
			</template>

			<template v-slot:mainPage3>
				<userPage :easingFunction="easingFunction"></userPage>

			</template>
		</fk-tab>
		
		<view
			ref="subButton3"
			elevation="10px"
			style="position: fixed;bottom: 350px;left:10px;width: 50px;height: 50px;border-width: 3px;border-color: #ec7d9c;background-color: #FFFFFF; border-radius: 25px;justify-content: center;align-items: center;">
			<text style="color: #ec7d9c;font-size: 12px;font-weight: bold;">Touch</text>
		</view>
		
		<view
			ref="subButton2"
			elevation="10px"
			style="position: fixed;bottom: 350px;left:10px;width: 50px;height: 50px;border-width: 3px;border-color: #ec7d9c;background-color: #FFFFFF; border-radius: 25px;justify-content: center;align-items: center;">
			<text style="color: #ec7d9c;font-size: 12px;font-weight: bold;">Easing</text>
		</view>
		
		<view
			ref="subButton1"
			elevation="10px"
			style="position: fixed;bottom: 350px;left:10px;width: 50px;height: 50px;border-width: 3px;border-color: #ec7d9c;background-color: #FFFFFF; border-radius: 25px;justify-content: center;align-items: center;">
			<text style="color: #ec7d9c;font-size: 12px;font-weight: bold;">Debug</text>
		</view>
		
		<view
			ref="devButton"
			@longpress="bindDevButtonPan"
			@tap="isShow ? hideSubButton() : showSubButton()"
			elevation="15px"
			style="position: fixed;bottom: 350px;left:10px;width: 50px;height: 50px;border-width: 3px;border-color: #FFFFFF;background-color: #ec7d9c; border-radius: 25px;justify-content: center;align-items: center;">
			<text style="color: #FFFFFF;font-size: 15px;font-weight: bold;">Dev</text>
		</view>
		
	</view>

</template>

<script>
	import screenInfo from "@/funky-ui/common/helper.js"
	import testData from "@/test_data/data.js"

	import userPage from "@/pages/userPage/userPage"

	// #ifdef APP-NVUE
	const BindingX = uni.requireNativePlugin('bindingx');
	const dom = uni.requireNativePlugin('dom') // 在APP端引入weex的dom组件
	// #endif

	export default {
		components: {
			userPage
		},
		data() {
			return {
				fabList: [{
						id: 'home',
						url: "/static/home.png"
					},
					{
						id: 'search',
						url: "/static/search.png"
					},
					{
						id: 'message',
						url: "/static/flash.png"
					},
					{
						id: 'user',
						url: "/static/logo.jpg"
					}
				],
				data: [],
				screenHeightPx: 0,
				screenWidthPx: 0,
				statusBarHeight: 0,
				isRefresh: false,
				videoData: [],
				bindFabExpression: '',
				bindFabProperty: '',
				fabStyles: {},
				listScrollable: true,
				contentOffsetX: 0,
				
				easingFunction: 'easeOutExpo',
				
				devButtonDeltaY: 0,
				devButtonDeltaX: 0,
				devButton: '',
				subButton: '',
				isBindingTime: false,
				isShow: false,
				bottom: 100,
				
				currentPage: 0,
			}
		},
		onPullDownRefresh() {
			console.log("页面下拉刷新!")
			setTimeout(() => {
				uni.stopPullDownRefresh
			}, 2000)
		},
		onLoad() {
			this.screenHeightPx = screenInfo.screenHeightPx
			this.screenWidthPx = screenInfo.screenWidthPx
			this.statusBarHeight = screenInfo.system.statusBarHeight
			for (var i = 0; i < 20; i++) {
				this.data.push(i)
			}
			this.videoData = testData.videoData
		},
		onReady() {
			this.devButton = this.getEl(this.$refs.devButton)
			this.subButton1 = this.getEl(this.$refs.subButton1)
			this.subButton2 = this.getEl(this.$refs.subButton2)
			this.subButton3 = this.getEl(this.$refs.subButton3)
		},
		created() {
			if (screenInfo.system.platform == 'ios') {
				var fabHeight = screenInfo.system.safeAreaInsets.bottom
			} else {
				var fabHeight = this.statusBarHeight
			}
			var fabMaxTranslateY = fabHeight * 3
			this.bindFabExpression =
				`${fabMaxTranslateY} * (x < ${screenInfo.realScreenWidth} ? (1 - x / ${screenInfo.realScreenWidth}) : 0)`
			this.bindFabProperty = 'transform.translateY'
			this.fabStyles = {
				'height': '50px',
				'position': 'fixed',
				'justifyContent': 'space-around',
				'alignItems': 'center',
				'flexDirection': 'row',
				'borderRadius': '25px',
				'borderWidth': '3px',
				'borderColor': '#ec7d9c',
				'left': this.screenWidthPx * (1 - 0.618) * 0.5 + 'px',
				'bottom': fabHeight + 'px',
				'width': this.screenWidthPx * 0.618 + 'px'
			}
		},
		mounted() {},
		methods: {
			refreshing: function() {
				this.isRefresh = true
				setTimeout(() => {
					this.isRefresh = false
				}, 2000)
			},
			pageChange: function(e) {
				this.currentPage = e.currentPage
			},
			scroll: function(e) {
				this.contentOffsetX = e.contentOffsetX
			},
			fabTap: function(e, index) {
				let pageId = 'page-' + e.target.id
				this.$refs['main-tab'].scrollToPage(pageId)
			},
			getEl: function(e) {
				if (typeof(e[0]) == 'object') {
					return e[0].ref
				} else {
					return e.ref
				}
			},
			bindDevButtonPan: function(e) {
				console.log(e)
				if(this.isBindingTime) {
					return
				}
				if(this.isShow) {
					this.hideSubButton()
					return
				}
				BindingX.bind({
						eventType: 'pan',
						anchor: this.devButton,
						props: [
							{
								element: this.devButton,
								property: 'transform.translateX',
								expression: `x + (${this.devButtonDeltaX})`
							},
							{
								element: this.devButton,
								property: 'transform.translateY',
								expression: `y + (${this.devButtonDeltaY})`
							},
							{
								element: this.subButton1,
								property: 'transform.translateX',
								expression: `x + (${this.devButtonDeltaX})`
							},
							{
								element: this.subButton1,
								property: 'transform.translateY',
								expression: `y + (${this.devButtonDeltaY})`
							},
							{
								element: this.subButton2,
								property: 'transform.translateX',
								expression: `x + (${this.devButtonDeltaX})`
							},
							{
								element: this.subButton2,
								property: 'transform.translateY',
								expression: `y + (${this.devButtonDeltaY})`
							},
							{
								element: this.subButton3,
								property: 'transform.translateX',
								expression: `x + (${this.devButtonDeltaX})`
							},
							{
								element: this.subButton3,
								property: 'transform.translateY',
								expression: `y + (${this.devButtonDeltaY})`
							}
						]
					},
					((e) => {
						// pan有start/end/cancel 3个状态
						if (e.state !== 'start') {
							// console.log('解除绑定')
							BindingX.unbind({token: e.token,eventType: 'pan'})
							this.devButtonDeltaY += e.deltaY
							this.devButtonDeltaX += e.deltaX
							this.bindDevButtonTiming()
						}
					})
				)
			},
			bindDevButtonTiming: function() {
				let changeByX = this.devButtonDeltaX
				var expressionX = `easeOutBack(t,${changeByX},${-changeByX},500)`
				
				this.isBindingTime = true
				BindingX.bind({
						eventType: 'timing',
						exitExpression: 't>500',
						props: [
							{
								element: this.devButton,
								property: 'transform.translateX',
								expression: expressionX
							},
							{
								element: this.subButton1,
								property: 'transform.translateX',
								expression: expressionX
							},
							{
								element: this.subButton2,
								property: 'transform.translateX',
								expression: expressionX
							},
							{
								element: this.subButton3,
								property: 'transform.translateX',
								expression: expressionX
							}
						]
					},
					((e) => {
						if(e.state !== 'start') {
							this.devButtonDeltaX = 0
							this.isBindingTime = false
						}
					})
				)
			},
			showSubButton: function(e) {
				console.log("show")
				let start = this.devButtonDeltaX
				
				BindingX.bind({
						eventType: 'timing',
						exitExpression: 't>500',
						props: [
							{
								element: this.subButton1,
								property: 'transform.translateX',
								expression: `easeOutBack(t,${start},${50},500)`
							},
							{
								element: this.subButton2,
								property: 'transform.translateX',
								expression: `easeOutBack(t,${start},${100},500)`
							},
							{
								element: this.subButton3,
								property: 'transform.translateX',
								expression: `easeOutBack(t,${start},${150},500)`
							}
						]
					})
				this.isShow = true
			},
			hideSubButton: function(e) {
				console.log("hide")
				let start = this.devButtonDeltaX
				
				BindingX.bind({
						eventType: 'timing',
						exitExpression: 't>500',
						props: [
							{
								element: this.subButton1,
								property: 'transform.translateX',
								expression: `easeInBack(t,${start + 50},${-50},500)`
							},
							{
								element: this.subButton2,
								property: 'transform.translateX',
								expression: `easeInBack(t,${start + 100},${-100},500)`
							},
							{
								element: this.subButton3,
								property: 'transform.translateX',
								expression: `easeInBack(t,${start + 150},${-150},500)`
							}
						]
					})
				this.isShow = false
			}
		}
	};
</script>

<style>

</style>
